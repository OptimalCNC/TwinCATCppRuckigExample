///////////////////////////////////////////////////////////////////////////////
// Interpolator1D.cpp
#include "TcPch.h"
#pragma hdrstop

#include "Interpolator1D.h"
#include "ExampleVersion.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CInterpolator1D
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CInterpolator1D
BEGIN_INTERFACE_MAP(CInterpolator1D)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_IPERSIST_LIB(CInterpolator1D, VID_Example, CID_ExampleCInterpolator1D)
IMPLEMENT_ITCOMOBJECT(CInterpolator1D)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CInterpolator1D)
IMPLEMENT_ITCADI(CInterpolator1D)
IMPLEMENT_ITCWATCHSOURCE(CInterpolator1D)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CInterpolator1D 
BEGIN_SETOBJPARA_MAP(CInterpolator1D)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_Interpolator1DParameter, m_Parameter)
	SETOBJPARA_VALUE(PID_Ctx_TaskCycleNs, m_CycleTime)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	SETOBJPARA_ITFPTR(PID_Interpolator1DTask, m_spTask)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CInterpolator1D 
BEGIN_GETOBJPARA_MAP(CInterpolator1D)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_Interpolator1DParameter, m_Parameter)
	GETOBJPARA_VALUE(PID_Ctx_TaskCycleNs, m_CycleTime)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
	GETOBJPARA_ITFPTR(PID_Interpolator1DTask, m_spTask)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CInterpolator1D
BEGIN_OBJPARAWATCH_MAP(CInterpolator1D)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CInterpolator1D
BEGIN_OBJDATAAREA_MAP(CInterpolator1D)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_Interpolator1DInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_Interpolator1DOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CInterpolator1D::CInterpolator1D()
	: m_Trace(m_TraceLevelMax, m_spSrv)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	m_CycleTime = 0;
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CInterpolator1D::~CInterpolator1D() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CInterpolator1D)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CInterpolator1D::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// Obtain max velocity, max acceleration and max jerk from configuration
	m_PositionInterpolator.SetMaxVelocity(m_Parameter.max_velocity);
	m_PositionInterpolator.SetMaxAcceleration(m_Parameter.max_acceleration);
	m_PositionInterpolator.SetMaxJerk(m_Parameter.max_jerk);
	m_VelocityInterpolator.SetMaxVelocity(m_Parameter.max_velocity);
	m_VelocityInterpolator.SetMaxAcceleration(m_Parameter.max_acceleration);
	m_VelocityInterpolator.SetMaxJerk(m_Parameter.max_jerk);

	m_Trace.Log(tlAlways, "Parameters for interpolator: max_vel (%f), max_acc (%f), max_jerk(%f)", m_Parameter.max_velocity, m_Parameter.max_acceleration, m_Parameter.max_jerk);
	
	// Obtain CycleTime; We shall use `ms` as unit.
	const double cycleTimeInMS = static_cast<double>(m_CycleTime) / 1E6;
	m_PositionInterpolator.SetCycleTime(cycleTimeInMS);
	m_VelocityInterpolator.SetCycleTime(cycleTimeInMS);
	m_Trace.Log(tlAlways, "Parameters for interpolator: CycleTime (%f ms)", cycleTimeInMS);

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CInterpolator1D::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CInterpolator1D::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CInterpolator1D::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CInterpolator1D::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;
	static bool bPositionRunning = false;
	static bool bVelocityRunning = false;	

	if (bPositionRunning) {
		PositionInterpolator1D::State next_state;
		const auto result = m_PositionInterpolator.Update(m_CurrentStatePos, next_state, m_Outputs.PositionControlState.Time);
		m_CurrentStatePos = next_state;
		bPositionRunning = result == ruckig::Result::Working;
	}
	else {
		// Reset
		m_PositionInterpolator.Reset();
		m_PositionInterpolator.SetTargetState({ 0.0, 0.0, 0.0 });
		m_CurrentStatePos = {m_Inputs.InitialPosition, 0.0, 0.0}; // set the initial state
		m_Outputs.PositionControlState.Time = 0.0;
		bPositionRunning = true;
	}
	m_Outputs.PositionControlState.Position = m_CurrentStatePos.position;
	m_Outputs.PositionControlState.Velocity = m_CurrentStatePos.velocity;
	m_Outputs.PositionControlState.Acceleration = m_CurrentStatePos.acceleration;

	if (bVelocityRunning) {
		VelocityInterpolator1D::State next_state;
		const auto result = m_VelocityInterpolator.Update(m_CurrentStateVel, next_state, m_Outputs.VelocityControlState.Time);
		m_CurrentStateVel = next_state;
		bVelocityRunning = result == ruckig::Result::Working;
	}
	else {
		// Reset
		m_VelocityInterpolator.Reset();
		m_VelocityInterpolator.SetTargetVelocity(0.0);
		m_VelocityInterpolator.SetTargetAcceleration(0.0);
		m_CurrentStateVel = { 0.0, m_Inputs.InitialVelocity, 0.0 }; // set the initial state
		bVelocityRunning = true;
	}
	m_Outputs.VelocityControlState.Position = m_CurrentStateVel.position;
	m_Outputs.VelocityControlState.Velocity = m_CurrentStateVel.velocity;
	m_Outputs.VelocityControlState.Acceleration = m_CurrentStateVel.acceleration;
	
	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CInterpolator1D::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CInterpolator1D::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

