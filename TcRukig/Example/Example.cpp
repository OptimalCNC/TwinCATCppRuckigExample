///////////////////////////////////////////////////////////////////////////////
// Example.cpp
#include "TcPch.h"
#pragma hdrstop

#include "Example.h"
#include "ExampleVersion.h"
#include "ruckigExamples.h"
#include "eg01.h"
#include "eg05.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CExample
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CExample
BEGIN_INTERFACE_MAP(CExample)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_IPERSIST_LIB(CExample, VID_Example, CID_ExampleCExample)
IMPLEMENT_ITCOMOBJECT(CExample)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CExample)
IMPLEMENT_ITCADI(CExample)
IMPLEMENT_ITCWATCHSOURCE(CExample)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CExample 
BEGIN_SETOBJPARA_MAP(CExample)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_ExampleTolerance, m_Tolerance)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CExample 
BEGIN_GETOBJPARA_MAP(CExample)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_ExampleTolerance, m_Tolerance)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CExample
BEGIN_OBJPARAWATCH_MAP(CExample)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CExample
BEGIN_OBJDATAAREA_MAP(CExample)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_ExampleInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_ExampleOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CExample::CExample()
	: m_Trace(m_TraceLevelMax, m_spSrv)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	m_Tolerance = 0;
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CExample::~CExample() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CExample)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CExample::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	m_Tolerance = 1e-4;

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CExample::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CExample::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CExample::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

void CExample::CompareNumber(double a, double b) {
	const double diff = fabs_(a - b);
	m_Outputs.SumDiff += diff;
	if (diff >= m_Tolerance) {
		m_Trace.Log(tlAlways, "Too much difference: [%f] - [%f]", a, b);
	}
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CExample::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;
	// If User change Example, re-run.
	if (m_ActiveExampleId != m_Inputs.ExampleId) {
		m_Running = false;
		m_ActiveExampleId = m_Inputs.ExampleId;
		m_Trace.Log(tlAlways, "Change Example to %d", m_ActiveExampleId);
	}
	// if m_Running set to false, either last-run is finished or user change example;
	if (!m_Running) {
		m_Running = true;
		m_Steps = 0;
		switch (m_ActiveExampleId)
		{
		case 1:
			ruckig::eg1::Reset(m_otg, m_ruckig_input, m_ruckig_output);
			break;
		case 5:
			ruckig::eg5::Reset(m_otg, m_ruckig_input, m_ruckig_output);
			break;
		default:
			break;
		}
	}
	
	if (m_otg.update(m_ruckig_input, m_ruckig_output) == ruckig::Result::Working) {
		m_Steps++;
		m_ruckig_output.pass_to_input(m_ruckig_input);

		// Copy to Outputs
		m_Outputs.MotionOutput.time = m_ruckig_output.time;
		for (int i = 0; i < kDOFS; i++) {
			m_Outputs.MotionOutput.pos[i] = m_ruckig_output.new_position[i];
			m_Outputs.MotionOutput.vel[i] = m_ruckig_output.new_velocity[i];
		}

		m_Outputs.SumDiff = 0.0;

		switch (m_ActiveExampleId)
		{
		case 1:
			CompareNumber(ruckig::eg1::T_ARRAY_GT[m_Steps], m_Outputs.MotionOutput.time);
			for (int j = 0; j < kDOFS; j++) {
				CompareNumber(ruckig::eg1::POS_ARRAY_GT[m_Steps][j], m_ruckig_output.new_position[j]);
			}
			break;
		case 5:
			CompareNumber(ruckig::eg5::T_ARRAY_GT[m_Steps], m_Outputs.MotionOutput.time);
			for (int j = 0; j < kDOFS; j++) {
				CompareNumber(ruckig::eg5::POS_ARRAY_GT[m_Steps][j], m_ruckig_output.new_position[j]);
			}
			for (int j = 0; j < kDOFS; j++) {
				CompareNumber(ruckig::eg5::VEL_ARRAY_GT[m_Steps][j], m_ruckig_output.new_velocity[j]);
			}
			break;
		default:
			break;
		}


	}
	else {
		m_Running = false;
	}
	
	m_Outputs.ExampleId = m_ActiveExampleId;
	m_Outputs.EffectiveTolerance = m_Tolerance;
	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CExample::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CExample::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}

